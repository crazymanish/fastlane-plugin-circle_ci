require 'fastlane/action'
require_relative '../helper/circle_ci_helper'

module Fastlane
  module Actions
    module SharedValues
      CIRCLECI_JOB_ARTIFACTS = :CIRCLECI_JOB_ARTIFACTS
    end

    class CircleciGetJobArtifactsAction < Action
      def self.run(params)
        UI.message("Getting artifacts for CircleCI job via API v2...")
        
        api_token = params[:api_token]
        job_number = params[:job_number]
        project_slug = params[:project_slug]
        
        # Make API request
        result = Helper::CircleCiHelper.get_v2("project/#{project_slug}/job/#{job_number}/artifacts", api_token)
        
        # Store values in lane context
        Actions.lane_context[SharedValues::CIRCLECI_JOB_ARTIFACTS] = result["items"]
        
        UI.success("Successfully retrieved #{result["items"].count} artifacts for job #{job_number}")
        
        return result["items"]
      end

      def self.description
        "Gets artifacts for a CircleCI job using API v2"
      end

      def self.details
        "This action retrieves all artifacts generated by a specific CircleCI job using the CircleCI API v2."
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(key: :api_token,
                                       env_name: "CIRCLE_CI_API_TOKEN",
                                       description: "API Token for CircleCI API",
                                       sensitive: true,
                                       code_gen_sensitive: true,
                                       is_string: true,
                                       default_value: ENV["CIRCLE_CI_API_TOKEN"],
                                       default_value_dynamic: true,
                                       optional: false),
          FastlaneCore::ConfigItem.new(key: :project_slug,
                                       env_name: "CIRCLE_CI_PROJECT_SLUG",
                                       description: "Project slug in the form of :vcs-type/:org-name/:project-name (e.g. github/myorg/myrepo)",
                                       is_string: true,
                                       default_value: ENV["CIRCLE_CI_PROJECT_SLUG"],
                                       default_value_dynamic: true,
                                       optional: false),
          FastlaneCore::ConfigItem.new(key: :job_number,
                                       env_name: "CIRCLE_CI_JOB_NUMBER",
                                       description: "The number of the job to get artifacts for",
                                       is_string: true,
                                       optional: false)
        ]
      end

      def self.output
        [
          ['CIRCLECI_JOB_ARTIFACTS', 'An array of artifact data for the job']
        ]
      end

      def self.return_value
        "Returns an array of artifact data including URLs, paths, and node information."
      end

      def self.authors
        ["crazymanish", "copilot"]
      end

      def self.example_code
        [
          'circleci_get_job_artifacts(
            project_slug: "github/myorg/myrepo",
            job_number: "123"
          )',
          'artifacts = circleci_get_job_artifacts(
            project_slug: "github/myorg/myrepo",
            job_number: "123"
          )
          
          # Find and download a specific artifact
          if artifacts.any?
            test_results = artifacts.find { |a| a["path"].end_with?("test-results.xml") }
            
            if test_results
              circleci_download_artifact(
                artifact_url: test_results["url"],
                destination_path: "./test-results/circle-results.xml"
              )
            end
          end'
        ]
      end

      def self.is_supported?(platform)
        true
      end

      def self.category
        :ci
      end
    end
  end
end